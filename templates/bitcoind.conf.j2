# {{ ansible_managed }}
# Compatible with Bitcoin Core Daemon version v0.13.1.0-g03422e5

#
# Options
#

# Execute command when a relevant alert is received or we see a really
# long fork (%s in cmd is replaced by message)
#alertnotify=<cmd>
{% if bitcoind_alertnotify is defined %}
alertnotify={{ bitcoind_alertnotify }}
{% endif %}

# Execute command when the best block changes (%s in cmd is replaced by
# block hash)
#blocknotify=<cmd>
{% if bitcoind_blocknotify is defined %}
blocknotify={{ bitcoind_blocknotify }}
{% endif %}

# How many blocks to check at startup (default: 6, 0 = all)
#checkblocks=<n>
{% if bitcoind_checkblocks is defined %}
checkblocks={{ bitcoind_checkblocks }}
{% endif %}

# How thorough the block verification of -checkblocks is (0-4, default: 3)
#checklevel=<n>
{% if bitcoind_checklevel is defined %}
checklevel={{ bitcoind_checklevel }}
{% endif %}

# Set database cache size in megabytes (4 to 16384, default: 300)
#dbcache=<n>
{% if bitcoind_dbcache is defined %}
dbcache={{ bitcoind_dbcache }}
{% endif %}

# Imports blocks from external blk000??.dat file on startup
#loadblock=<file>
{% if bitcoind_loadblock is defined %}
loadblock={{ bitcoind_loadblock }}
{% endif %}

# Keep at most <n> unconnectable transactions in memory (default: 100)
#maxorphantx=<n>
{% if bitcoind_maxorphantx is defined %}
maxorphantx={{ bitcoind_maxorphantx }}
{% endif %}

# Keep the transaction memory pool below <n> megabytes (default: 300)
#maxmempool=<n>
{% if bitcoind_maxmempool is defined %}
maxmempool={{ bitcoind_maxmempool }}
{% endif %}

# Do not keep transactions in the mempool longer than <n> hours (default:
# 72)
#mempoolexpiry=<n>
{% if bitcoind_mempoolexpiry is defined %}
mempoolexpiry={{ bitcoind_mempoolexpiry }}
{% endif %}

# Set the number of script verification threads (-4 to 16, 0 = auto, <0 =
# leave that many cores free, default: 0)
#par=<n>
{% if bitcoind_par is defined %}
par={{ bitcoind_par }}
{% endif %}

# Reduce storage requirements by pruning (deleting) old blocks. This mode
# is incompatible with -txindex and -rescan. Warning: Reverting
# this setting requires re-downloading the entire blockchain.
# (default: 0 = disable pruning blocks, >550 = target size in MiB
# to use for block files)
#prune=<n>
{% if bitcoind_prune is defined %}
prune={{ bitcoind_prune }}
{% endif %}

# Create new files with system default permissions, instead of umask 077
# (only effective with disabled wallet functionality)
#sysperms=[0|1]
{% if bitcoind_sysperms is defined %}
sysperms={{ bitcoind_sysperms }}
{% endif %}

# Maintain a full transaction index, used by the getrawtransaction rpc
# call (default: 0)
#txindex=[0|1]
{% if bitcoind_txindex is defined %}
txindex={{ bitcoind_txindex }}
{% endif %}

#
# Connection options
#

# Add a node to connect to and attempt to keep the connection open
#addnode=<ip>
{% if bitcoind_addnode is defined %}
addnode={{ bitcoind_addnode }}
{% endif %}

# Threshold for disconnecting misbehaving peers (default: 100)
#banscore=<n>
{% if bitcoind_banscore is defined %}
banscore={{ bitcoind_banscore }}
{% endif %}

# Number of seconds to keep misbehaving peers from reconnecting (default:
# 86400)
#bantime=<n>
{% if bitcoind_bantime is defined %}
bantime={{ bitcoind_bantime }}
{% endif %}

# Bind to given address and always listen on it. Use [host]:port notation
# for IPv6
#bind=<addr>
{% if bitcoind_bind is defined %}
bind={{ bitcoind_bind }}
{% endif %}

# Connect only to the specified node(s)
#connect=<ip>
{% if bitcoind_connect is defined %}
connect={{ bitcoind_connect }}
{% endif %}

# Discover own IP addresses (default: 1 when listening and no -externalip
# or -proxy)
#discover=[0|1]
{% if bitcoind_discover is defined %}
discover={{ bitcoind_discover }}
{% endif %}

# Allow DNS lookups for -addnode, -seednode and -connect (default: 1)
#dns=[0|1]
{% if bitcoind_dns is defined %}
dns={{ bitcoind_dns }}
{% endif %}

# Query for peer addresses via DNS lookup, if low on addresses (default: 1
# unless -connect)
#dnsseed=[0|1]
{% if bitcoind_dnsseed is defined %}
dnsseed={{ bitcoind_dnsseed }}
{% endif %}

# Specify your own public address
#externalip=<ip>
{% if bitcoind_externalip is defined %}
externalip={{ bitcoind_externalip }}
{% endif %}

# Always query for peer addresses via DNS lookup (default: 0)
#forcednsseed=[0|1]
{% if bitcoind_forcednsseed is defined %}
forcednsseed={{ bitcoind_forcednsseed }}
{% endif %}

# Accept connections from outside (default: 1 if no -proxy or -connect)
#listen=[0|1]
{% if bitcoind_listen is defined %}
listen={{ bitcoind_listen }}
{% endif %}

# Automatically create Tor hidden service (default: 1)
#listenonion=[0|1]
{% if bitcoind_listenonion is defined %}
listenonion={{ bitcoind_listenonion }}
{% endif %}

# Maintain at most <n> connections to peers (default: 125)
#maxconnections=<n>
{% if bitcoind_maxconnections is defined %}
maxconnections={{ bitcoind_maxconnections }}
{% endif %}

# Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)
#maxreceivebuffer=<n>
{% if bitcoind_maxreceivebuffer is defined %}
maxreceivebuffer={{ bitcoind_maxreceivebuffer }}
{% endif %}

# Maximum per-connection send buffer, <n>*1000 bytes (default: 1000)
#maxsendbuffer=<n>
{% if bitcoind_maxsendbuffer is defined %}
maxsendbuffer={{ bitcoind_maxsendbuffer }}
{% endif %}

# Maximum allowed median peer time offset adjustment. Local perspective of
# time may be influenced by peers forward or backward by this
# amount. (default: 4200 seconds)
#maxtimeadjustment=[0|1]
{% if bitcoind_maxtimeadjustment is defined %}
maxtimeadjustment={{ bitcoind_maxtimeadjustment }}
{% endif %}

# Use separate SOCKS5 proxy to reach peers via Tor hidden services
# (default: -proxy)
#onion=<ip:port>
{% if bitcoind_onion is defined %}
onion={{ bitcoind_onion }}
{% endif %}

# Only connect to nodes in network <net> (ipv4, ipv6 or onion)
#onlynet=<net>
{% if bitcoind_onlynet is defined %}
onlynet={{ bitcoind_onlynet }}
{% endif %}

# Relay non-P2SH multisig (default: 1)
#permitbaremultisig=[0|1]
{% if bitcoind_permitbaremultisig is defined %}
permitbaremultisig={{ bitcoind_permitbaremultisig }}
{% endif %}

# Support filtering of blocks and transaction with bloom filters (default:
# 1)
#peerbloomfilters=[0|1]
{% if bitcoind_peerbloomfilters is defined %}
peerbloomfilters={{ bitcoind_peerbloomfilters }}
{% endif %}

# Listen for connections on <port> (default: 8333 or testnet: 18333)
#port=<port>
{% if bitcoind_port is defined %}
port={{ bitcoind_port }}
{% endif %}

# Connect through SOCKS5 proxy
#proxy=<ip:port>
{% if bitcoind_proxy is defined %}
proxy={{ bitcoind_proxy }}
{% endif %}

# Randomize credentials for every proxy connection. This enables Tor
# stream isolation (default: 1)
#proxyrandomize=[0|1]
{% if bitcoind_proxyrandomize is defined %}
proxyrandomize={{ bitcoind_proxyrandomize }}
{% endif %}

# Connect to a node to retrieve peer addresses, and disconnect
#seednode=<ip>
{% if bitcoind_seednode is defined %}
seednode={{ bitcoind_seednode }}
{% endif %}

# Specify connection timeout in milliseconds (minimum: 1, default: 5000)
#timeout=<n>
{% if bitcoind_timeout is defined %}
timeout={{ bitcoind_timeout }}
{% endif %}

# Tor control port to use if onion listening enabled (default:
# 127.0.0.1:9051)
#torcontrol=<ip>:<port>
{% if bitcoind_torcontrol is defined %}
torcontrol={{ bitcoind_torcontrol }}
{% endif %}

# Tor control port password (default: empty)
#torpassword=<pass>
{% if bitcoind_torpassword is defined %}
torpassword={{ bitcoind_torpassword }}
{% endif %}

# Bind to given address and whitelist peers connecting to it. Use
# [host]:port notation for IPv6
#whitebind=<addr>
{% if bitcoind_whitebind is defined %}
whitebind={{ bitcoind_whitebind }}
{% endif %}

# Whitelist peers connecting from the given netmask or IP address. Can be
# specified multiple times. Whitelisted peers cannot be DoS banned
# and their transactions are always relayed, even if they are
# already in the mempool, useful e.g. for a gateway
#whitelist=<netmask>
{% if bitcoind_whitelist is defined %}
{% for value in bitcoind_whitelist %}
whitelist={{ value }}
{% endfor %}
{% endif %}

# Accept relayed transactions received from whitelisted peers even when
# not relaying transactions (default: 1)
#whitelistrelay=[0|1]
{% if bitcoind_whitelistrelay is defined %}
whitelistrelay={{ bitcoind_whitelistrelay }}
{% endif %}

# Force relay of transactions from whitelisted peers even if they violate
# local relay policy (default: 1)
#whitelistforcerelay=[0|1]
{% if bitcoind_whitelistforcerelay is defined %}
whitelistforcerelay={{ bitcoind_whitelistforcerelay }}
{% endif %}

# Tries to keep outbound traffic under the given target (in MiB per 24h),
# 0 = no limit (default: 0)
#maxuploadtarget=<n>
{% if bitcoind_maxuploadtarget is defined %}
maxuploadtarget={{ bitcoind_maxuploadtarget }}
{% endif %}

#
# Wallet options
#

# Do not load the wallet and disable wallet RPC calls
#disablewallet=[0|1]
{% if bitcoind_disablewallet is defined %}
disablewallet={{ bitcoind_disablewallet }}
{% endif %}

# Set key pool size to <n> (default: 100)
#keypool=<n>
{% if bitcoind_keypool is defined %}
keypool={{ bitcoind_keypool }}
{% endif %}

# A fee rate (in BTC/kB) that will be used when fee estimation has
# insufficient data (default: 0.0002)
#fallbackfee=<amt>
{% if bitcoind_fallbackfee is defined %}
fallbackfee={{ bitcoind_fallbackfee }}
{% endif %}

# Fees (in BTC/kB) smaller than this are considered zero fee for
# transaction creation (default: 0.00001)
#mintxfee=<amt>
{% if bitcoind_mintxfee is defined %}
mintxfee={{ bitcoind_mintxfee }}
{% endif %}

# Fee (in BTC/kB) to add to transactions you send (default: 0.00)
#paytxfee=<amt>
{% if bitcoind_paytxfee is defined %}
paytxfee={{ bitcoind_paytxfee }}
{% endif %}

# Rescan the block chain for missing wallet transactions on startup
#rescan=[0|1]
{% if bitcoind_rescan is defined %}
rescan={{ bitcoind_rescan }}
{% endif %}

# Attempt to recover private keys from a corrupt wallet on startup
#salvagewallet=[0|1]
{% if bitcoind_salvagewallet is defined %}
salvagewallet={{ bitcoind_salvagewallet }}
{% endif %}

# Spend unconfirmed change when sending transactions (default: 1)
#spendzeroconfchange=[0|1]
{% if bitcoind_spendzeroconfchange is defined %}
spendzeroconfchange={{ bitcoind_spendzeroconfchange }}
{% endif %}

# If paytxfee is not set, include enough fee so transactions begin
# confirmation on average within n blocks (default: 2)
#txconfirmtarget=<n>
{% if bitcoind_txconfirmtarget is defined %}
txconfirmtarget={{ bitcoind_txconfirmtarget }}
{% endif %}

# Use hierarchical deterministic key generation (HD) after BIP32. Only has
# effect during wallet creation/first start (default: 1)
#usehd=[0|1]
{% if bitcoind_usehd is defined %}
usehd={{ bitcoind_usehd }}
{% endif %}

# Upgrade wallet to latest format on startup
#upgradewallet=[0|1]
{% if bitcoind_upgradewallet is defined %}
upgradewallet={{ bitcoind_upgradewallet }}
{% endif %}

# Specify wallet file (within data directory) (default: wallet.dat)
#wallet=<file>
{% if bitcoind_wallet is defined %}
wallet={{ bitcoind_wallet }}
{% endif %}

# Make the wallet broadcast transactions (default: 1)
#walletbroadcast=[0|1]
{% if bitcoind_walletbroadcast is defined %}
walletbroadcast={{ bitcoind_walletbroadcast }}
{% endif %}

# Execute command when a wallet transaction changes (%s in cmd is replaced
# by TxID)
#walletnotify=<cmd>
{% if bitcoind_walletnotify is defined %}
walletnotify={{ bitcoind_walletnotify }}
{% endif %}

# Delete all wallet transactions and only recover those parts of the
# blockchain through -rescan on startup (1 = keep tx meta data e.g.
# account owner and payment request information, 2 = drop tx meta
# data)
#zapwallettxes=<mode>
{% if bitcoind_zapwallettxes is defined %}
zapwallettxes={{ bitcoind_zapwallettxes }}
{% endif %}

#
# ZeroMQ notification options
#

# Enable publish hash block in <address>
#zmqpubhashblock=<address>
{% if bitcoind_zmqpubhashblock is defined %}
zmqpubhashblock={{ bitcoind_zmqpubhashblock }}
{% endif %}

# Enable publish hash transaction in <address>
#zmqpubhashtx=<address>
{% if bitcoind_zmqpubhashtx is defined %}
zmqpubhashtx={{ bitcoind_zmqpubhashtx }}
{% endif %}

# Enable publish raw block in <address>
#zmqpubrawblock=<address>
{% if bitcoind_zmqpubrawblock is defined %}
zmqpubrawblock={{ bitcoind_zmqpubrawblock }}
{% endif %}

# Enable publish raw transaction in <address>
#zmqpubrawtx=<address>
{% if bitcoind_zmqpubrawtx is defined %}
zmqpubrawtx={{ bitcoind_zmqpubrawtx }}
{% endif %}

#
# Debugging/Testing options
#

# Append comment to the user agent string
#uacomment=<cmt>
{% if bitcoind_uacomment is defined %}
uacomment={{ bitcoind_uacomment }}
{% endif %}

# Output debugging information (default: 0, supplying <category> is
# optional). If <category> is not supplied or if <category> = 1,
# output all debugging information.<category> can be: addrman,
# alert, bench, coindb, db, http, libevent, lock, mempool,
# mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins,
# tor, zmq.
#debug=<category>
{% if bitcoind_debug is defined %}
debug={{ bitcoind_debug }}
{% endif %}

# Include IP addresses in debug output (default: 0)
#logips=[0|1]
{% if bitcoind_logips is defined %}
logips={{ bitcoind_logips }}
{% endif %}

# Prepend debug output with timestamp (default: 1)
#logtimestamps=[0|1]
{% if bitcoind_logtimestamps is defined %}
logtimestamps={{ bitcoind_logtimestamps }}
{% endif %}

# Fees (in BTC/kB) smaller than this are considered zero fee for relaying,
# mining and transaction creation (default: 0.00001)
#minrelaytxfee=<amt>
{% if bitcoind_minrelaytxfee is defined %}
minrelaytxfee={{ bitcoind_minrelaytxfee }}
{% endif %}

# Maximum total fees (in BTC) to use in a single wallet transaction or raw
# transaction; setting this too low may abort large transactions
# (default: 0.10)
#maxtxfee=<amt>
{% if bitcoind_maxtxfee is defined %}
maxtxfee={{ bitcoind_maxtxfee }}
{% endif %}

# Send trace/debug info to console instead of debug.log file
#printtoconsole=[0|1]
{% if bitcoind_printtoconsole is defined %}
printtoconsole={{ bitcoind_printtoconsole }}
{% endif %}

# Shrink debug.log file on client startup (default: 1 when no -debug)
#shrinkdebugfile=[0|1]
{% if bitcoind_shrinkdebugfile is defined %}
shrinkdebugfile={{ bitcoind_shrinkdebugfile }}
{% endif %}

#
# Chain selection options
#

# Use the test chain
#testnet=[0|1]
{% if bitcoind_testnet is defined %}
testnet={{ bitcoind_testnet }}
{% endif %}

#
# Node relay options
#

# Equivalent bytes per sigop in transactions for relay and mining
# (default: 20)
#bytespersigop=[0|1]
{% if bitcoind_bytespersigop is defined %}
bytespersigop={{ bitcoind_bytespersigop }}
{% endif %}

# Relay and mine data carrier transactions (default: 1)
#datacarrier=[0|1]
{% if bitcoind_datacarrier is defined %}
datacarrier={{ bitcoind_datacarrier }}
{% endif %}

# Maximum size of data in data carrier transactions we relay and mine
# (default: 83)
#datacarriersize=[0|1]
{% if bitcoind_datacarriersize is defined %}
datacarriersize={{ bitcoind_datacarriersize }}
{% endif %}

# Enable transaction replacement in the memory pool (default: 1)
#mempoolreplacement=[0|1]
{% if bitcoind_mempoolreplacement is defined %}
mempoolreplacement={{ bitcoind_mempoolreplacement }}
{% endif %}

#
# Block creation options
#

# Set maximum BIP141 block weight (default: 3000000)
#blockmaxweight=<n>
{% if bitcoind_blockmaxweight is defined %}
blockmaxweight={{ bitcoind_blockmaxweight }}
{% endif %}

# Set maximum block size in bytes (default: 750000)
#blockmaxsize=<n>
{% if bitcoind_blockmaxsize is defined %}
blockmaxsize={{ bitcoind_blockmaxsize }}
{% endif %}

# Set maximum size of high-priority/low-fee transactions in bytes
# (default: 0)
#blockprioritysize=<n>
{% if bitcoind_blockprioritysize is defined %}
blockprioritysize={{ bitcoind_blockprioritysize }}
{% endif %}

#
# RPC server options
#

# Accept command line and JSON-RPC commands
#server=[0|1]
{% if bitcoind_server is defined %}
server={{ bitcoind_server }}
{% endif %}

# Accept public REST requests (default: 0)
#rest=[0|1]
{% if bitcoind_rest is defined %}
rest={{ bitcoind_rest }}
{% endif %}

# Bind to given address to listen for JSON-RPC connections. Use
# [host]:port notation for IPv6. This option can be specified
# multiple times (default: bind to all interfaces)
#rpcbind=<addr>
{% if bitcoind_rpcbind is defined %}
{% for value in bitcoind_rpcbind %}
rpcbind={{ value }}
{% endfor %}
{% endif %}

# Location of the auth cookie (default: data dir)
#rpccookiefile=<loc>
{% if bitcoind_rpccookiefile is defined %}
rpccookiefile={{ bitcoind_rpccookiefile }}
{% endif %}

# Username for JSON-RPC connections
#rpcuser=<user>
{% if bitcoind_rpcuser is defined %}
rpcuser={{ bitcoind_rpcuser }}
{% endif %}

# Password for JSON-RPC connections
#rpcpassword=<pw>
{% if bitcoind_rpcpassword is defined %}
rpcpassword={{ bitcoind_rpcpassword }}
{% endif %}

# Username and hashed password for JSON-RPC connections. The field
# <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A
# canonical python script is included in share/rpcuser. This option
# can be specified multiple times
#rpcauth=<userpw>
{% if bitcoind_rpcauth is defined %}
{% for value in bitcoind_rpcauth %}
rpcauth={{ value }}
{% endfor %}
{% endif %}

# Listen for JSON-RPC connections on <port> (default: 8332 or testnet:
# 18332)
#rpcport=<port>
{% if bitcoind_rpcport is defined %}
rpcport={{ bitcoind_rpcport }}
{% endif %}

# Allow JSON-RPC connections from specified source. Valid for <ip> are a
# single IP (e.g. 1.2.3.4), a network/netmask (e.g.
# 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This
# option can be specified multiple times
#rpcallowip=<ip>
{% if bitcoind_rpcallowip is defined %}
{% for value in bitcoind_rpcallowip %}
rpcallowip={{ value }}
{% endfor %}
{% endif %}
